a=5
where
exit
#The Burke-Lauenroth Laboratory
#STEPWAT R Wrapper
#Main R Script for STEPWAT_R_WRAPPER
#Load Required Packages
library(DBI)
library(RSQLite)
library(mail)
library(sendmailR)
library(rSOILWAT2)
#Number of cores
proc_count<-6
#Source directory, the source.directory will be filled in automatically when rSFSTEP2 runs
source.dir<-"nopath"
source.dir<-paste(source.dir,"/", sep="")
source.dir<-"/home/ksodhi/Documents/InputOverhaul_updated/rSFSTEP2/StepWat_R_Wrapper_Parallel/"
setwd(source.dir)
#Set database location
db_loc<-""
db_loc<-"/home/ksodhi/Documents/"
#Database location, edit the name of the weather database accordingly
database_name<-"dbWeatherData_Sagebrush_KP.v3.2.0.sqlite"
database<-file.path(db_loc,database_name)
database
db_loc<-"/home/ksodhi/Documents//dbWeatherData_Sagebrush_KP.v3.2.0.sqlite"
db_loc<-"/home/ksodhi/Documents/dbWeatherData_Sagebrush_KP.v3.2.0.sqlite"
#Query script (Loads data from the database into a list)
query.file<-paste(source.dir,"RSoilWat31.Weather.Data.Query_V2.R", sep="")
query.file
#Assembly script (Assemble data with respect to years and conditions)
assemble.file<-paste(source.dir,"Weather.Assembly.Choices_V2.R", sep="")
#Markov script (To generate cov and prob files)
markov.file<-paste(source.dir,"Markov.Weather_V2.R",sep="")
#Wrapper script
wrapper.file<-paste(source.dir,"StepWat.Wrapper.Code_V3.R", sep="")
#Output script
output.file<-paste(source.dir,"SoilWatOutput.R", sep="")
#Start timing for timing statistics
tick_on<-proc.time()
#rSFSTEP2 will automatically populate the site string with the sites specified in generate_stepwat_sites.sh
site<-c(sitefolderid)#,2,3,4,5,6,7,8,9,10)
sitefolderid<-1
#rSFSTEP2 will automatically populate the site string with the sites specified in generate_stepwat_sites.sh
site<-c(sitefolderid)#,2,3,4,5,6,7,8,9,10)
site
#######################################################################################
#KS: Source site species requirements from a csv
species_data <- read.csv("InputData_Species.csv", header=TRUE, sep=",")
species_data_all_sites<-unique(species_data$Site)
if(any(grepl(",",species_data_all_sites))==TRUE)
{
species_data_all_sites_vectors<-species_data_all_sites[grepl(",",species_data_all_sites)]
for(j in species_data_all_sites_vectors)
{
if(grepl(site,j))
{
species_data_site<-species_data[species_data$Site==j,]
treatments_vector_species<-unique(species_data_site$treatment)
setwd("STEPWAT_DIST")
for(i in treatments_vector_species)
{
df=species_data_site[species_data_site$treatment==i,]
df <- subset(df, select = -c(1,2) )
write.table(df, file = paste0("species_",i,"_vector",".in"),quote = FALSE,row.names=FALSE,col.names = FALSE,sep="\t")
}
setwd("..")
}
}
}
species_data_site<-species_data[species_data$Site==site | species_data$Site=="all",]
treatments_species<-unique(species_data_site$treatment)
setwd("STEPWAT_DIST")
for(i in treatments_species)
{
df=species_data_site[species_data_site$treatment==i,]
df <- subset(df, select = -c(1,2) )
write.table(df, file = paste0("species_",i,".in"),quote=FALSE,row.names=FALSE,col.names = FALSE,sep="\t")
}
treatments_species<-as.character(treatments_species)
treatments_species <- paste("species_",treatments_species,sep="")
treatments_vector_species<-as.character(treatments_vector_species)
treatments_vector_species <- paste("species_",treatments_vector_species, "_vector", sep="")
#Soil types are specified here, in accordance with the files added to STEPWAT_DIST folder
species<-c(treatments_species,treatments_vector_species)#c("soils.17sand.13clay","soils.68sand.10clay") #KS: uncommented to test overhaul of inputs
species<-paste(species,".in",sep="")
for (i in species)
{
system(paste("cat ","species_template.in>>",i,sep=""))
}
setwd("..")
soil_data <- read.csv("InputData_SoilLayers.csv", header=TRUE, sep=",")
soil_data_all_sites<-unique(soil_data$Site)
soil_data_all_sites_vectors<-soil_data_all_sites[grepl(",",soil_data_all_sites)]
if(any(grepl(",",soil_data_all_sites))==TRUE)
{
for(j in soil_data_all_sites_vectors)
{
if(grepl(site,j))
{
soil_data_site<-soil_data[soil_data$Site==j,]
treatments_vector<-unique(soil_data_site$soil_treatment)
setwd("STEPWAT_DIST")
for(i in treatments_vector)
{
df=soil_data_site[soil_data_site$soil_treatment==i,]
df <- subset(df, select = -c(1,2) )
write.table(df, file = paste0(i,"_vector",".in"),row.names=FALSE,col.names = FALSE,sep="\t")
}
setwd("..")
}
}
}
soil_data_site<-soil_data[soil_data$Site==site | soil_data$Site=="all",]
treatments<-unique(soil_data_site$soil_treatment)
setwd("STEPWAT_DIST")
for(i in treatments)
{
df=soil_data_site[soil_data_site$soil_treatment==i,]
df <- subset(df, select = -c(1,2) )
write.table(df, file = paste0(i,".in"),row.names=FALSE,col.names = FALSE,sep="\t")
}
treatments<-as.character(treatments)
treatments_vector<-as.character(treatments_vector)
treatments_vector <- paste(treatments_vector, "_vector", sep="")
#Soil types are specified here, in accordance with the files added to STEPWAT_DIST folder
soil.types<-c(treatments,treatments_vector)#c("soils.17sand.13clay","soils.68sand.10clay") #KS: uncommented to test overhaul of inputs
setwd("..")
rgroup_data <- read.csv("InputData_Rgroup.csv", header=TRUE, sep=",")
rgroup_data_all_sites<-unique(rgroup_data$Site)
rgroup_data_all_sites_vectors<-rgroup_data_all_sites[grepl(",",rgroup_data_all_sites)]
if(any(grepl(",",rgroup_data_all_sites))==TRUE)
{
for(j in rgroup_data_all_sites_vectors)
{
if(grepl(site,j))
{
rgroup_data_site<-rgroup_data[rgroup_data$Site==j,]
treatments_vector<-unique(rgroup_data_site$treatment)
setwd("STEPWAT_DIST")
for(i in treatments_vector)
{
df=rgroup_data_site[rgroup_data_site$treatment==i,]
df <- subset(df, select = -c(1,2) )
write.table(df, file = paste0(i,"_vector",".in"),row.names=FALSE,col.names = FALSE,sep="\t")
}
setwd("..")
}
}
}
rgroup_data_site<-rgroup_data[rgroup_data$Site==site | rgroup_data$Site=="all",]
treatments<-unique(rgroup_data_site$treatment)
setwd("STEPWAT_DIST")
#Specify kill frequency
dist.freq<-vector(mode="double", length=0)
#Specify grazing frequency
graz.freq<-vector(mode="double", length=0)
#Set grazing intensity
graz_intensity<-vector(mode="character", length=0)
for(i in treatments)
{
df=rgroup_data_site[rgroup_data_site$treatment==i,]
df <- subset(df, select = -c(1,2) )
temp<-df['killfrq']
temp<-unique(temp)
temp<-as.numeric(temp)
dist.freq.current<-temp
dist.freq<-c(dist.freq,temp)
temp<-df['grazing_frq']
temp<-unique(temp)
temp<-as.numeric(temp)
graz.freq.current<-temp
graz.freq<-c(graz.freq,temp)
temp<-df['proportion_grazing']
temp<-unique(temp)
temp<-max(temp)
temp<-as.numeric(temp)
if(temp==0.24)
{
temp="lowgraz"
}else if(temp==0.41)
{
temp="modgraz"
}else if(temp==0.58)
{
temp="highgraz"
}
graz_intensity.current<-temp
graz_intensity<-c(graz_intensity,temp)
write.table(df, file = paste0("rgroup.","freq",dist.freq.current,".graz",".",graz.freq,".",graz_intensity.current,".in"),quote=FALSE,row.names=FALSE,col.names = FALSE,sep="\t")
}
dist.freq<-unique(dist.freq)
#Load Required Packages
library(DBI)
library(RSQLite)
library(mail)
library(sendmailR)
library(rSOILWAT2)
#Number of cores
proc_count<-6
#Source directory, the source.directory will be filled in automatically when rSFSTEP2 runs
source.dir<-"nopath"
